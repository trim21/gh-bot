name: Release(docker)

on:
  push:
    tags:
      - v*
    branches:
      - master

permissions:
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      IMAGE: 'ghcr.io/trim21/gh-bot'

    concurrency:
      group: ${{ github.workflow }}-${{ github.sha }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - run: |
          export "TAG_HASH=${DOCKER_FILE_HASH:0:10}-${LOCK_FILE_HASH:0:10}"

          if ! docker pull "${IMAGE}:base-${TAG_HASH}"; then
            echo "build base docker image"
            docker build -t "${IMAGE}:base-${TAG_HASH}" -f etc/base.dockerfile .
            docker push "${IMAGE}:base-${TAG_HASH}"
          fi

          docker tag "${IMAGE}:base-${TAG_HASH}" base-image

        env:
          LOCK_FILE_HASH: "${{ hashFiles('yarn.lock') }}"
          DOCKER_FILE_HASH: "${{ hashFiles('etc/base.dockerfile') }}"
        name: build base docker image

      - run: |
          echo "TAG=master-$(git show --no-patch --no-notes --date=short --pretty='%h-%as')" >> $GITHUB_ENV
        if: "${{ !startsWith(github.ref, 'refs/tags/') }}"

      - run: |
          echo "TAG=v$(cat package.json | jq .version -r)" >> $GITHUB_ENV
        if: "${{ startsWith(github.ref, 'refs/tags/') }}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: '${{ env.IMAGE }}'
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./etc/main.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            ARG_REF=${{ env.TAG }}
          labels: ${{ steps.meta.outputs.labels }}
